{
  "name": "Code Quality Analyzer",
  "description": "Analyzes modified source code files for potential improvements, code smells, design patterns, and best practices",
  "trigger": {
    "type": "fileChange",
    "patterns": [
      "**/*.js",
      "**/*.jsx",
      "**/*.ts",
      "**/*.tsx"
    ],
    "excludePatterns": [
      "**/node_modules/**",
      "**/build/**",
      "**/dist/**",
      "**/*.test.js",
      "**/*.spec.js",
      "**/package-lock.json"
    ]
  },
  "prompt": "Analyze the modified code in the following file for potential improvements. Focus on:\n\n1. **Code Smells**: Identify any code smells like long methods, duplicate code, large classes, or complex conditionals\n2. **Design Patterns**: Suggest appropriate design patterns that could improve the code structure\n3. **Best Practices**: Check for adherence to JavaScript/React best practices including:\n   - Proper error handling\n   - Consistent naming conventions\n   - Function/component size and complexity\n   - Separation of concerns\n   - Performance considerations\n4. **Readability**: Suggest improvements for code clarity and documentation\n5. **Maintainability**: Identify areas that could be refactored for easier maintenance\n6. **Performance**: Point out potential performance optimizations\n\nProvide specific, actionable suggestions while maintaining the existing functionality. Consider the project context: this is a competitive shooting match management system with React frontend and Node.js/Express backend.\n\nFile: {{filePath}}\n\n```{{fileExtension}}\n{{fileContent}}\n```\n\nPlease provide concrete suggestions with code examples where helpful, but keep recommendations focused and practical."
}