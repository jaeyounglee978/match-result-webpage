{
  "enabled": true,
  "name": "Code Quality Analyzer",
  "description": "Monitors source code files for changes and provides automated code quality analysis including code smells, design patterns, and best practices suggestions",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "backend/**/*.js",
      "frontend/src/**/*.js",
      "frontend/src/**/*.jsx",
      "backend/controllers/*.js",
      "backend/middleware/*.js",
      "backend/services/*.js",
      "frontend/src/components/*.js",
      "frontend/src/pages/**/*.js",
      "frontend/src/hooks/*.js",
      "frontend/src/services/*.js"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified code files for potential improvements. Focus on:\n\n1. **Code Smells**: Identify long methods, duplicate code, complex conditionals, and other maintainability issues\n2. **Design Patterns**: Suggest appropriate design patterns that could improve the code structure\n3. **Best Practices**: Check for JavaScript/React/Node.js best practices including:\n   - Proper error handling\n   - Async/await usage\n   - Component composition\n   - State management patterns\n   - Security considerations (especially for auth and API endpoints)\n4. **Performance**: Identify potential performance bottlenecks and optimization opportunities\n5. **Readability**: Suggest improvements for variable naming, function structure, and code organization\n\nFor each suggestion, provide:\n- The specific issue or improvement opportunity\n- Why it matters for maintainability/performance/security\n- A concrete code example of the improvement\n- Priority level (High/Medium/Low)\n\nFocus on actionable suggestions that maintain existing functionality while improving code quality."
  }
}